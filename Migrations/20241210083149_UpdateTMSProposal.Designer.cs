// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TMS_Api;

#nullable disable

namespace TMS_Api.Migrations
{
    [DbContext(typeof(TMSDBContext))]
    [Migration("20241210083149_UpdateTMSProposal")]
    partial class UpdateTMSProposal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TMS_Api.DBModels.DocumentSetting", b =>
                {
                    b.Property<string>("DocCode")
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttachRequired")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DocName")
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsInDoc")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOutDoc")
                        .HasColumnType("bit");

                    b.Property<string>("PCCode")
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.HasKey("DocCode");

                    b.ToTable("DocumentSetting");
                });

            modelBuilder.Entity("TMS_Api.DBModels.Driver", b =>
                {
                    b.Property<string>("LicenseNo")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("BlackDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BlackReason")
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("BlackRemovedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BlackRemovedReason")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ContactNo")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsBlack")
                        .HasColumnType("bit");

                    b.Property<string>("LicenseClass")
                        .HasColumnType("varchar(2)");

                    b.Property<DateTime?>("LicenseExpiration")
                        .HasColumnType("datetime");

                    b.Property<string>("NRC")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.HasKey("LicenseNo");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("TMS_Api.DBModels.Gate", b =>
                {
                    b.Property<string>("GateID")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("YardID")
                        .HasColumnType("varchar(25)");

                    b.HasKey("GateID");

                    b.ToTable("Gate");
                });

            modelBuilder.Entity("TMS_Api.DBModels.ICD_InBoundCheck", b =>
                {
                    b.Property<int>("InRegNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InRegNo"));

                    b.Property<string>("AreaID")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("CardNo")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Customer")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("DriverContactNo")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DriverLicenseNo")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("DriverName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InCargoInfo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InCargoType")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("InCheckDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("InGateID")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("InPCCode")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("InType")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("InWeightBridgeID")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("InYardID")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("InboundWeight")
                        .HasColumnType("bit");

                    b.Property<string>("OutWeightBridgeID")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("OutboundWeight")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("varchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TrailerVehicleRegNo")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("TransporterID")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("TransporterName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TruckType")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("TruckVehicleRegNo")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.HasKey("InRegNo");

                    b.ToTable("ICD_InBoundCheck");
                });

            modelBuilder.Entity("TMS_Api.DBModels.ICD_InBoundCheck_Document", b =>
                {
                    b.Property<int>("InRegNo")
                        .HasColumnType("int");

                    b.Property<string>("DocCode")
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("CheckStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DocName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Remark")
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.HasKey("InRegNo", "DocCode");

                    b.ToTable("ICD_InBoundCheck_Document");
                });

            modelBuilder.Entity("TMS_Api.DBModels.ICD_OutBoundCheck", b =>
                {
                    b.Property<int>("OutRegNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OutRegNo"));

                    b.Property<string>("AreaID")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("CardNo")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Customer")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("DriverContactNo")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DriverLicenseNo")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("DriverName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OutCargoInfo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OutCargoType")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("OutCheckDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("OutGateID")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("OutPCCode")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("OutType")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("OutWeightBridgeID")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("OutYardID")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("OutboundWeight")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("varchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TrailerVehicleRegNo")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("TransporterID")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("TransporterName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TruckType")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("TruckVehicleRegNo")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.HasKey("OutRegNo");

                    b.ToTable("ICD_OutBoundCheck");
                });

            modelBuilder.Entity("TMS_Api.DBModels.ICD_OutBoundCheck_Document", b =>
                {
                    b.Property<int>("OutRegNo")
                        .HasColumnType("int");

                    b.Property<string>("DocCode")
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("CheckStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DocName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Remark")
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.HasKey("OutRegNo", "DocCode");

                    b.ToTable("ICD_OutBoundCheck_Document");
                });

            modelBuilder.Entity("TMS_Api.DBModels.ICD_TruckProcess", b =>
                {
                    b.Property<int?>("InRegNo")
                        .HasColumnType("int");

                    b.Property<string>("AreaID")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("CardNo")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Customer")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("DriverContactNo")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DriverLicenseNo")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("DriverName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InCargoInfo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InCargoType")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("InCheckDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("InGateID")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("InGatePassTime")
                        .HasColumnType("datetime");

                    b.Property<string>("InPCCode")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("InType")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("InWeightBridgeID")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("InWeightDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("InYard")
                        .HasColumnType("bit");

                    b.Property<string>("InYardID")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("InboundWeight")
                        .HasColumnType("bit");

                    b.Property<string>("OutCargoInfo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OutCargoType")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("OutCheckDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("OutGateID")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("OutGatePassTime")
                        .HasColumnType("datetime");

                    b.Property<string>("OutPCCode")
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("OutRegNo")
                        .HasColumnType("int");

                    b.Property<string>("OutType")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("OutWeightBridgeID")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("OutWeightDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("OutYardID")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("OutboundWeight")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TrailerVehicleRegNo")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("TransporterID")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("TransporterName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TruckType")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("TruckVehicleRegNo")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.HasKey("InRegNo");

                    b.ToTable("ICD_TruckProcess");
                });

            modelBuilder.Entity("TMS_Api.DBModels.OperationArea", b =>
                {
                    b.Property<string>("AreaID")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GroupName")
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("IsWaitingArea")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("YardID")
                        .HasColumnType("varchar(25)");

                    b.HasKey("AreaID");

                    b.ToTable("OperationArea");
                });

            modelBuilder.Entity("TMS_Api.DBModels.PCard", b =>
                {
                    b.Property<string>("CardNo")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CardIssueDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CardReturnDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GroupName")
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("IsUse")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VehicleRegNo")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("YardID")
                        .HasColumnType("varchar(25)");

                    b.HasKey("CardNo");

                    b.ToTable("PCard");
                });

            modelBuilder.Entity("TMS_Api.DBModels.PCategory", b =>
                {
                    b.Property<string>("PCCode")
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CategoryName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GroupName")
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("InboundWeight")
                        .HasColumnType("bit");

                    b.Property<bool?>("OutboundWeight")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.HasKey("PCCode");

                    b.ToTable("PCategory");
                });

            modelBuilder.Entity("TMS_Api.DBModels.TMS_Proposal", b =>
                {
                    b.Property<int?>("PropNo")
                        .HasColumnType("int");

                    b.Property<string>("CargoInfo")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("EstDate")
                        .HasColumnType("datetime");

                    b.Property<string>("JobCode")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("JobDept")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("JobType")
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("LCLQty")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfFEU")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfTEU")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfTruck")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Yard")
                        .HasColumnType("varchar(25)");

                    b.HasKey("PropNo");

                    b.ToTable("TMS_Proposal");
                });

            modelBuilder.Entity("TMS_Api.DBModels.TMS_ProposalDetail", b =>
                {
                    b.Property<int>("PropNo")
                        .HasColumnType("int");

                    b.Property<string>("TruckNo")
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DriverContact")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DriverName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NightStop")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OtherInfo")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("TruckAssignId")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("TruckAssignOption")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.HasKey("PropNo", "TruckNo");

                    b.ToTable("TMS_ProposalDetails");
                });

            modelBuilder.Entity("TMS_Api.DBModels.Trailer", b =>
                {
                    b.Property<string>("VehicleRegNo")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("BlackDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BlackReason")
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("BlackRemovedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BlackRemovedReason")
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("ContainerSize")
                        .HasColumnType("int");

                    b.Property<string>("ContainerType")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DriverLicenseNo")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("IsBlack")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastPassedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(max)");

                    b.Property<decimal?>("TrailerWeight")
                        .HasColumnType("Decimal(18,5)");

                    b.Property<string>("TransporterID")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VehicleBackRegNo")
                        .HasColumnType("varchar(25)");

                    b.HasKey("VehicleRegNo");

                    b.ToTable("Trailer");
                });

            modelBuilder.Entity("TMS_Api.DBModels.Transporter", b =>
                {
                    b.Property<string>("TransporterID")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("BlackDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BlackReason")
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("BlackRemovedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BlackRemovedReason")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ContactNo")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsBlack")
                        .HasColumnType("bit");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("SAPID")
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("SrNo")
                        .HasColumnType("int");

                    b.Property<string>("TransporterName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TypeID")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.HasKey("TransporterID");

                    b.ToTable("Transporter");
                });

            modelBuilder.Entity("TMS_Api.DBModels.Truck", b =>
                {
                    b.Property<string>("VehicleRegNo")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("BlackDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BlackReason")
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("BlackRemovedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BlackRemovedReason")
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("ContainerSize")
                        .HasColumnType("int");

                    b.Property<string>("ContainerType")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DriverLicenseNo")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("IsBlack")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRGL")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastPassedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TransporterID")
                        .HasColumnType("varchar(25)");

                    b.Property<decimal?>("TruckWeight")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("TypeID")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VehicleBackRegNo")
                        .HasColumnType("varchar(25)");

                    b.HasKey("VehicleRegNo");

                    b.ToTable("Truck");
                });

            modelBuilder.Entity("TMS_Api.DBModels.TruckType", b =>
                {
                    b.Property<string>("TypeID")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.HasKey("TypeID");

                    b.ToTable("TruckType");
                });

            modelBuilder.Entity("TMS_Api.DBModels.WeightBridge", b =>
                {
                    b.Property<string>("WeightBridgeID")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("YardID")
                        .HasColumnType("varchar(25)");

                    b.HasKey("WeightBridgeID");

                    b.ToTable("WeightBridge");
                });

            modelBuilder.Entity("TMS_Api.DBModels.WeightBridgeQueue", b =>
                {
                    b.Property<int>("RegNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegNo"));

                    b.Property<string>("CardNo")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("CargoInfo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CargoType")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Customer")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("DriverContactNo")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DriverLicenseNo")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("DriverName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GateID")
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("InRegNo")
                        .HasColumnType("int");

                    b.Property<string>("JobCode")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("JobDescription")
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("QueueNo")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("TrailerVehicleRegNo")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("TruckVehicleRegNo")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("WBillNo")
                        .HasColumnType("int");

                    b.Property<string>("WOption")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("WeightBridgeID")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("WeightDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("YardID")
                        .HasColumnType("varchar(25)");

                    b.HasKey("RegNo");

                    b.ToTable("WeightBridgeQueue");
                });

            modelBuilder.Entity("TMS_Api.DBModels.Yard", b =>
                {
                    b.Property<string>("YardID")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.HasKey("YardID");

                    b.ToTable("Yard");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

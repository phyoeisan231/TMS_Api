// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TMS_Api;

#nullable disable

namespace TMS_Api.Migrations
{
    [DbContext(typeof(TMSDBContext))]
    [Migration("20241120075917_AddTransporter")]
    partial class AddTransporter
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TMS_Api.DBModels.Driver", b =>
                {
                    b.Property<string>("LicenseNo")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("BlackDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BlackReason")
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("BlackRemovedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BlackRemovedReason")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ContactNo")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsBlack")
                        .HasColumnType("bit");

                    b.Property<string>("LicenseClass")
                        .HasColumnType("varchar(2)");

                    b.Property<DateTime?>("LicenseExpiration")
                        .HasColumnType("datetime");

                    b.Property<string>("NRC")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TransporterID")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.HasKey("LicenseNo");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("TMS_Api.DBModels.Gate", b =>
                {
                    b.Property<string>("GateID")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("YardID")
                        .HasColumnType("varchar(25)");

                    b.HasKey("GateID");

                    b.ToTable("Gate");
                });

            modelBuilder.Entity("TMS_Api.DBModels.Trailer", b =>
                {
                    b.Property<string>("VehicleRegNo")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("BlackDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BlackReason")
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("BlackRemovedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BlackRemovedReason")
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("ContainerSize")
                        .HasColumnType("int");

                    b.Property<string>("ContainerType")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DriverLicenseNo")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("IsBlack")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastPassedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(max)");

                    b.Property<decimal?>("TrailerWeight")
                        .HasColumnType("Decimal(18,5)");

                    b.Property<string>("TransporterID")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VehicleBackRegNo")
                        .HasColumnType("varchar(25)");

                    b.HasKey("VehicleRegNo");

                    b.ToTable("Trailer");
                });

            modelBuilder.Entity("TMS_Api.DBModels.Transporter", b =>
                {
                    b.Property<string>("TransporterID")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("BlackDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BlackReason")
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("BlackRemovedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BlackRemovedReason")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ContactNo")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsBlack")
                        .HasColumnType("bit");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("SAPID")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("TransporterName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TypeID")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.HasKey("TransporterID");

                    b.ToTable("Transporter");
                });

            modelBuilder.Entity("TMS_Api.DBModels.TransporterType", b =>
                {
                    b.Property<string>("TypeID")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.HasKey("TypeID");

                    b.ToTable("TransporterType");
                });

            modelBuilder.Entity("TMS_Api.DBModels.Truck", b =>
                {
                    b.Property<string>("VehicleRegNo")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("BlackDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BlackReason")
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("BlackRemovedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BlackRemovedReason")
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("ContainerSize")
                        .HasColumnType("int");

                    b.Property<string>("ContainerType")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DriverLicenseNo")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("IsBlack")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastPassedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TransporterID")
                        .HasColumnType("varchar(25)");

                    b.Property<decimal?>("TruckWeight")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("TypeID")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VehicleBackRegNo")
                        .HasColumnType("varchar(25)");

                    b.HasKey("VehicleRegNo");

                    b.ToTable("Truck");
                });

            modelBuilder.Entity("TMS_Api.DBModels.TruckEntryType", b =>
                {
                    b.Property<string>("TypeID")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.HasKey("TypeID");

                    b.ToTable("TruckEntryType");
                });

            modelBuilder.Entity("TMS_Api.DBModels.TruckJobType", b =>
                {
                    b.Property<string>("TypeID")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.HasKey("TypeID");

                    b.ToTable("TruckJobType");
                });

            modelBuilder.Entity("TMS_Api.DBModels.TruckType", b =>
                {
                    b.Property<string>("TypeID")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.HasKey("TypeID");

                    b.ToTable("TruckType");
                });

            modelBuilder.Entity("TMS_Api.DBModels.WeightBridge", b =>
                {
                    b.Property<string>("WeightBridgeID")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GateID")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.HasKey("WeightBridgeID");

                    b.ToTable("WeightBridge");
                });

            modelBuilder.Entity("TMS_Api.DBModels.Yard", b =>
                {
                    b.Property<string>("YardID")
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("varchar(50)");

                    b.HasKey("YardID");

                    b.ToTable("Yard");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
